-- MySQL dump 10.13  Distrib 5.6.24, for Win64 (x86_64)
--
-- Host: 172.16.44.4    Database: java8_evaluation
-- ------------------------------------------------------
-- Server version	5.5.50-0+deb8u1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `Category`
--

DROP TABLE IF EXISTS `Category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `Category` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Category_Name` varchar(45) COLLATE utf8_bin NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `Category`
--

LOCK TABLES `Category` WRITE;
/*!40000 ALTER TABLE `Category` DISABLE KEYS */;
INSERT INTO `Category` VALUES (1,'new_in_java8'),(2,'old_ in_java8');
/*!40000 ALTER TABLE `Category` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `answer`
--

DROP TABLE IF EXISTS `answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `answer` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Answer` text COLLATE utf8_bin NOT NULL,
  `QuestionsIDFS` int(11) NOT NULL,
  `Selected_answer` int(11) NOT NULL,
  `Solution` tinyint(1) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=474 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `answer`
--

LOCK TABLES `answer` WRITE;
/*!40000 ALTER TABLE `answer` DISABLE KEYS */;
INSERT INTO `answer` VALUES (2,' A concrete subclass must implement all inherited abstract methods',1,0,1),(3,'A concrete subclass must implement all methods defined in an inherited interface',1,0,0),(4,'A concrete subclass cannot be marked as final',1,0,0),(5,'Abstract methods cannot be overridden by a concrete subclass',1,0,1),(6,'(Animal a) -> { return a.canHop(); }',2,0,1),(7,'(Animal a) ---> { return a.canHop(); }',2,0,0),(8,'(Animal a)  - { return a.canHop(); }',2,0,0),(9,'(Animal a) == { return a.canHop(); }',2,0,0),(10,'(Animal a) ={ return a.canHop(); }',2,0,0),(16,'String[] _names',4,0,1),(17,'String _Names[]',4,0,1),(18,'String[] 123',4,0,0),(19,'String abc[]',4,0,1),(20,'None of the above.',4,0,0),(273,'localdatetime',5,25,1),(274,'new LocalDate(2014, 5, 21);',6,0,0),(275,'new LocalDate(2014, 6, 21);',6,0,0),(276,'LocalDate.of(2014, 5, 21);',6,0,0),(277,'LocalDate.of(2014, 6, 21);',6,0,1),(278,'LocalDate.of(2014, Month.JUNE, 21);',6,0,1),(279,'public class Bird { }',7,0,1),(280,'public class Bird { public bird() {} }',7,0,0),(281,'public class Bird { public bird(String name) {} }',7,0,0),(282,'public class Bird { public Bird() {} }',7,0,1),(283,'public class Bird { Bird(String name) {} }',7,0,0),(304,'.bytecode',9,0,0),(305,'.bytes',9,0,0),(306,'.class',9,2,1),(307,'.exe',9,0,0),(308,'.javac',9,0,0),(309,'Exception',10,1,1),(310,'IllegalArgumentException',10,1,0),(311,'IOException',10,1,1),(312,'NullPointerException',10,1,0),(313,'NumberFormatException',10,1,0),(314,'An array has a fixed size.',11,5,1),(315,'An array allows multiple dimensions.',11,5,1),(316,'An ArrayList has a fixed size.',11,0,0),(317,'An array is immutable.',11,2,0),(318,'An ArrayList is immutable.',11,0,0),(319,'==',12,6,1),(320,'+',12,1,0),(321,'--',12,1,0),(322,'!',12,5,1),(323,'%',12,1,0),(324,'-14 % 3 = -2',13,1,1),(325,'-14 % 3 =  2',13,2,0),(326,' 14 % -3 = 2',13,4,1),(327,' 14 % -3 =-2',13,2,0),(328,'-14 % -3 = 2',13,3,0),(329,'-3 | 3 = -1 ',14,3,1),(330,' 3 | 3 = 3',14,5,1),(331,' 2 | 3 = 2',14,0,0),(332,'7 | 3 =  6',14,1,0),(333,'-7 | 3 = 5',14,1,0),(334,'An instance variable of type double defaults to null. ',15,0,0),(335,'An instance variable of type int defaults to 0.0. ',15,0,0),(336,' An instance variable of type double defaults to 0.0. ',15,6,1),(337,'An instance variable of type String defaults to 0.0. ',15,0,0),(338,'An instance variable of type String defaults to null. ',15,4,1),(339,'public',16,5,1),(340,'protected',16,0,0),(341,'private',16,0,0),(342,'static',16,1,1),(343,'abstract',16,2,0),(344,'java 8 is it',17,0,1),(356,'java8isit',17,1,0),(357,' itjavait8itis',17,1,0),(358,' java8isit',17,1,0),(359,'Jhffghhhhg',17,2,0),(361,'localdatetime1',5,2,0),(362,'java',17,1,0),(363,'If equals(null) is called, the method should throw an exception.',20,0,0),(364,'f equals(null) is called, the method should return false.',20,5,1),(365,'If equals(null) is called, the method should return true.',20,1,0),(366,'If equals() is passed the wrong type, the method should throw an exception.',20,0,0),(367,'If equals() is passed the wrong type, the method should return false.',20,6,1),(368,'@Override public boolean equals(Object o) { return false; }',21,4,1),(369,'@Override public boolean equals(Otter o) { return false; }',21,0,0),(370,'@Override public int hashCode() { return 42; }',21,2,1),(371,'@Override public long hashCode() { return 42; }',21,3,0),(372,'@Override public void play() { }',21,3,1),(373,'private instance methods',22,3,1),(374,'protected instance methods',22,2,0),(375,'public instance methods',22,0,0),(376,'static methods',22,3,1),(377,'public variables',22,1,1),(378,'The CanBark interface doesnâ€™t compile.',23,1,0),(379,'A class that implements HasVocalCords must override the makeSound() method.',23,3,0),(380,'A class that implements CanBark inherits both the makeSound() and bark() methods.',23,4,1),(381,'A class that implements CanBark only inherits the bark() method.',23,0,0),(382,'An interface cannot extend another interface.',23,1,0),(383,'public void main(String[] args) ',24,1,0),(384,'public static final main(String[] args) ',24,0,0),(385,'public static main(String[] args) ',24,0,0),(386,'public static void main(String[] args) ',24,4,1),(387,'None of the above.',24,0,0),(388,'An element is not found when searching a list.',25,0,0),(389,'An unexpected parameter is passed into a method.',25,3,1),(390,'The computer caught fire.',25,0,0),(391,'You want to loop through a list.',25,1,0),(392,'You donâ€™t know how to code a method.',25,0,0),(393,'A$B ',26,3,1),(394,'_helloWorld ',26,6,1),(395,'true ',26,0,0),(396,'java.lang ',26,0,0),(397,'1980_s',26,2,0),(398,'Wolf has-a name.',27,5,1),(399,'Wolf has-a Tail.',27,5,1),(400,'Wolf is-a Tail.',27,0,0),(401,'Wolf is-a Animal.',27,4,1),(402,'Canine is-a Wolf.',27,1,0),(403,'int i1 = 1_234; ',28,2,1),(404,'double d4 = 1_234.0; ',28,2,1),(405,'double d3 = 1_234.0_; ',28,0,0),(406,'double d2 = 1_234._0; ',28,1,0),(407,'None of the above.',28,3,0),(408,'public void toddle() {}',29,4,1),(409,'public void Toddle() {}',29,0,0),(410,'public final void toddle() {}',29,4,1),(411,'public static void toddle() {}',29,1,0),(412,'public void toddle() throws Exception {}',29,2,0),(413,'Line 4 generates a compiler error.',30,1,0),(414,'Line 5 generates a compiler error.',30,5,1),(415,' Line 7 generates a compiler error. ',30,2,1),(416,'Line 8 generates a compiler error.',30,4,1),(417,'The code compiles as is.',30,0,0),(418,'There will come a NoSuchElemtentException',31,0,0),(419,'The output will be foooobar',31,4,1),(420,'There is no output ',31,0,0),(421,'There will come a NullPointerException',31,0,0),(422,'The code cannot compile',31,1,0),(423,'40',32,0,0),(424,'50',32,0,0),(425,'90',32,0,0),(426,'0',32,0,0),(427,'The code will not compile',32,0,1),(428,'Access to same Class',33,3,1),(429,'Different package and subclass',33,0,0),(430,'same package and subclass',33,3,1),(431,'same package and non-subclass',33,2,1),(432,'Different package and  non-subclass',33,0,0),(448,'localdatetime3',5,2,0),(454,'dfgh',35,0,0),(455,'dfgh',35,1,1),(456,'ehg',35,0,0),(457,'ewrt',35,0,0),(458,'ewrt',35,0,0),(464,'5,6,2,8,9,3,7',35,0,0),(465,'dose not compile',35,2,0),(466,'5,6,2',35,0,0),(467,'5,6,2,8,[I@2a139a55',35,5,1),(468,'2',35,0,0),(469,'5,6,2,8,9,3,7',36,0,0),(470,'dose not compile',36,0,0),(471,'5,6,2',36,0,0),(472,'5,6,2,8,[I@2a139a55',36,0,1),(473,'2',36,0,0);
/*!40000 ALTER TABLE `answer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `questions`
--

DROP TABLE IF EXISTS `questions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `questions` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Questions` text COLLATE utf8_bin,
  `Information` text COLLATE utf8_bin NOT NULL,
  `Type` text COLLATE utf8_bin NOT NULL,
  `oldQuestion` tinyint(4) DEFAULT '0',
  `declaration` varchar(1010) COLLATE utf8_bin DEFAULT NULL,
  `CategoryIDFK` int(11) DEFAULT NULL,
  `QuestionDefinition` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `questions`
--

LOCK TABLES `questions` WRITE;
/*!40000 ALTER TABLE `questions` DISABLE KEYS */;
INSERT INTO `questions` VALUES (1,'Which of the following is true about a concrete subclass?','','checkbox',1,'B. Concrete classes are, by definition, not abstract, so option A is incorrect. A concrete <br>class must implement all inherited abstract methods, so option B is correct. Option C <br>is incorrect; a superclass may have already implemented an inherited interface, so the <br>concrete subclass would not need to implement the method. Concrete classes can be <br>both final and not final, so option D is incorrect. Finally, abstract methods must be <br>overridden by a concrete subclass, so option E is incorrect. <br>',2,'Questions about Subclasses'),(2,'How is the Lambda Syntax, including optional parts written?','','checkbox',1,'',1,'Lambda syntax with Optional parts'),(4,'Which of the following legally fill in the blank so you can run the main() method from the command line?','public static void main(_____)','checkbox',1,'A, C, D, E. Option A is correct because it is the traditional main() method signature <br>and variables may begin with underscores. Options C and D are correct because the <br>array operator may appear after the variable name. Option E is correct because <br>varargs are allowed in place of an array. Option B is incorrect because variables are <br>not allowed to begin with a digit. Option F is incorrect because the argument must be <br>an array or varargs. Option F is a perfectly good method. However, it is not one that <br>can be run from the command line because it has the wrong parameter type.',2,'Legal  signature of the Main Methode'),(5,'A Date Type who contains date and time(no time zone)?','only lowercase','textbox',1,' ',1,'A kind of a Date type'),(6,'Which of the following can be inserted into the blank to create a date of June 21, 2014?','Choose all that apply','checkbox',1,' ',1,'Questions about LocalDate'),(7,'Which of these classes compile and use a default constructor?','Choose all that apply','checkbox',1,' ',2,'Questions about constructor'),(9,'Bytecode is in a file with which extension?','','checkbox',1,' ',2,'Questions about Bytecode'),(10,'Which of the following are checked exceptions?','Choose all that apply','checkbox',1,' ',2,'Questions about Exceptions'),(11,'Which of the following are true?','Choose all that apply','checkbox',1,'A, C, D, E. An array is not able to change size and can have multiple dimensions. Both<br> an array and ArrayList are ordered and have indexes. Neither is immutable. The elements <br> can change in value.',2,'Questions about Array List'),(12,'Which of the following Java operators can be used with boolean variables? ','Choose all that apply','checkbox',1,'A, D. Option A is the equality operator and can be used on numeric primitives, boolean <br> values, and object references. Options B and C are both arithmetic operators and <br> cannot be applied to a boolean value. Option D is the logical complement operator <br> and is used exclusively with boolean values. Option E is the modulus operator, which <br>can only be used with numeric primitives. Finally, option F is a relational operator that <br> compares the values of two numbers.',2,'Java Operators'),(13,'Which of the following solutions are true?','','checkbox',1,' ',2,'Java Operator Modulo'),(14,'Which of the following outputs are true?','boolean binary \"or\"','checkbox',1,' ',2,'Binary boolean '),(15,'Which of the following are true?','Choose all that apply','checkbox',1,'C, D. Option C is correct because all non-primitive values default to null. Option D is<br>correct because float and double primitives default to 0.0. Options B and E are incorrect<br>because int primitives default to 0.',2,'Questions abour local variables'),(16,'What modifiers are assumed for all interface variables?','Choose all that apply','checkbox',1,'A, D, E. Interface variables are assumed to be public static final; therefore, options A, D, and E are correct. Options B and C are incorrect because interface variables must be publicâ€”interfaces are implemented by classes, not inherited by interfaces. Option F is incorrect because variables can never be abstract.',2,'Modifieres and Interface'),(17,'What is the output of the following String? ','String test = String.join(\" \", \"java\", \"8\", \"is\", \"it\"); <br> System.out.println(test);','textbox',1,'the first String in the join() function is the String which comes between the other Strings ',1,'String Method join'),(20,'Which of the following statements are true about the equals() method?','Choose all that apply','checkbox',1,'B, E. equals() should return false when the object it passed in is not equal to the current object. This includes null and incorrect types. An equals() method should have a null check and an instanceof check.',1,'Questions about the Equals method'),(21,'Which of the following could be inserted to fill in the blank?','public interface Otter {<br>default void play() { }<br> } <br> class RiverOtter implements Otter {<br> _____________________________ <br>}','checkbox',1,'A, C, E. Remember that @Override means that we are implementing a method from a superclass or interface. The Object class declares methods with the signatures in Options A and C. Granted, it is a poor implementation of equals(), but it does compile. Option E is also correct because the method is declared in Otter. Option F is incorrect because methods from an interface are always public. Option B is incorrect because the parameter type does not match the one in Object. Option D is incorrect because the return type does not match the one in Object.',1,'About Override Method'),(22,'Which of the following may only be hidden and not overridden?',' Choose all that apply','checkbox',1,'A, D, E, F. First off, options B and C are incorrect because protected and public methods may be overridden, not hidden. Option A is correct because private methods are always hidden in a subclass. Option D is also correct because static methods cannot be overridden, only hidden. Options E and F are correct because variables may only be hidden, regardless of the access modifier.',2,'Questions about Overrride'),(23,'Which statements are true about the following code?',' interface HasVocalCords {<br> public abstract void makeSound();<br> }<br>public interface CanBark extends HasVocalCords {<br> public void bark();<br>}','checkbox',1,'C. The code compiles without issue, so option A is wrong. Option B is incorrect, since an abstract class could implement HasVocalCords without the need to override the makeSound() method. Option C is correct; any class that implements CanBark automatically inherits its methods, as well as any inherited methods defined in the parent interface. Because option C is correct, it follows that option D is incorrect. Finally, an interface can extend multiple interfaces, so option E is incorrect.',2,'Questions about Interfaces and Abstract classes'),(24,'Which of the following are legal entry point methods that can be run from the command line? (Choose all that apply) ','','checkbox',1,'You can only start the main method in the command line.',2,'Start a Java app via command line'),(25,'Which scenario is the best use of an exception?','','checkbox',1,'B. IllegalArgumentException is used when an unexpected parameter is passed into a method. Option A is incorrect because returning null or -1 is a common return value for this scenario. Option D is incorrect because a for loop is typically used for this scenario. Option E is incorrect because you should find out how to code the method and not leave it for the unsuspecting programmer who calls your method. Option C is incorrect because you should run!',2,'Questions about Exceptions'),(26,'Which of the following are valid Java identifiers? ','(Choose all that apply) ','checkbox',1,'you can use the dollar sign in identifiers, you can use an underscore in identifiers',2,'About Java identifirers'),(27,'What statements are true about the following code?','public class Tail {}<br>public class Animal {<br>public String name;<br>}<br>public class Canine extends Animal {<br>public Tail tail;<br>}<br>public class Wolf extends Canine {}','checkbox',1,'A, B, D. A is correct because name is public and therefore inherited by the Wolf class. B is correct because Wolf is-a Canine and Canine has-a Tail; therefore, since tail is public, it is inherited and Wolf has-a Tail. C is incorrect, because Wolf is not inherited from Tail. D is correct, because Wolf is-a Canine and Canine is-a Animal; therefore, Wolf is-a Animal. E is incorrect, because the relationship is reversed. ',2,'About Superclasses and Subclasses'),(28,'Which of the following lines of code compile?','Choose all that apply','checkbox',1,'Es ist erlaubt, wenn vor und nach dem Bodenstrich eine Zahl folgt.',2,'Questions about Integer and double'),(29,'Which of the following can be inserted to override the superclass method?',' public class LearnToWalk { <br> public void toddle() {} <br>class BabyRhino extends LearnToWalk { <br>// INSERT CODE HERE <br>}<br> }','checkbox',1,'A, C. An override must have the same method signature. A and C both do. E does not compile because it throws a checked exception not declared in the superclass. D compiles but is not an override because it is static. B has a different method name, so it is not even an overload.',2,'Override a superclass'),(30,'Which of the following are true? (Choose all that apply) ','4: short numPets = 5;<br>  5: int numGrains = 5.6;<br>  6: String name = \"Scruffy\";<br>  7: numPets.length();<br>  8: numGrains.length();<br>  9: name.length();','checkbox',1,'Option A (line 4) compiles because short is an integral type.<br> Option B (line 5) generates a compiler error because int is an integral type, but 5.6 is a floating-point type.<br>Options D and E (lines 7 and 8) do not compile because short and int are primitives. Primitives do not allow methods to be called on them.',2,'Question about Java types'),(31,'Waht is the following output of the code?','String a = null; <br>Optional<String> test = Optional.ofNullable(a);<br> System.out.println(test.orElse(\"foooobar\"));','checkbox',1,'Number B is correct because Optional is able to get a null value and when the value is null will the orElse Methode print in this case \"foooobar\"',1,'Question about Optinal'),(32,' What is the output of the following code? ',' byte a = 40, b = 50;<br>   byte sum = (byte) a + b;<br>   System.out.println(sum);','checkbox',0,'Variable b ist beim rechnen als int definiert und wurde nicht in ein byte konvertiert .',NULL,'Simple calculation'),(33,'Waht is true about the default Access Specifier','','checkbox',0,'The default modifiers has only access in the same packeage.',NULL,'Question about access Modifiers'),(35,'What is the output of this code?','public class Overloading {\r\n public void test(int a, int...b){\r\n	 System.out.println(a);\r\n	 System.out.println(b);\r\n }\r\n \r\n public void test(int a, int b, int c){\r\n	 System.out.println(a);\r\n	 System.out.println(b);\r\n	 System.out.println(c);\r\n }\r\n \r\n public static void main(String[] args){\r\n	 \r\n	 Overloading o = new Overloading();\r\n	 o.test(5,6,2);\r\n	 o.test(8,9,3,7);\r\n }\r\n}\r\n','checkbox',0,'b prints out the reference, because it`s a Var Args with more than one int.',NULL,'Working with Var Args'),(36,'What is the output of this code?','public class Overloading {\r\n public void test(int a, int...b){\r\n	 System.out.println(a);\r\n	 System.out.println(b);\r\n }\r\n \r\n public void test(int a, int b, int c){\r\n	 System.out.println(a);\r\n	 System.out.println(b);\r\n	 System.out.println(c);\r\n }\r\n \r\n public static void main(String[] args){\r\n	 \r\n	 Overloading o = new Overloading();\r\n	 o.test(5,6,2);\r\n	 o.test(8,9,3,7);\r\n }\r\n}\r\n','checkbox',0,'b prints out the reference, because it`s a Var Args with more than one int.',NULL,'Working with Var Args');
/*!40000 ALTER TABLE `questions` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-11-17  8:56:27
